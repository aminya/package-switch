"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bundle_1 = require("./bundle");
const init_file_1 = require("./init-file");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const atom_1 = require("atom");
const season_1 = __importDefault(require("season"));
class Bundles {
    constructor(arg) {
        this.filename = null;
        this.data = {};
        this.single_bundles = {};
        this.project_bundles = {};
        this.writing = false;
        this.reload = this.reload.bind(this);
        this.setData = this.setData.bind(this);
        if (arg) {
            this.filename = arg === "" ? null : arg;
        }
        else {
            this.getFileName();
        }
        if (this.filename != null) {
            this.touchFile();
            this.getData();
            this.watcher = fs_1.default.watch(this.filename, this.reload);
        }
        else {
            this.data = {};
        }
        this.getPackages();
        this.project_bundles = {};
        this.emitter = new atom_1.Emitter();
    }
    destroy() {
        if (this.watcher != null) {
            this.watcher.close();
        }
        this.emitter.dispose();
        this.data = {};
        this.single_bundles = {};
        this.project_bundles = {};
    }
    reload(event, filename) {
        if (!this.writing) {
            if (this.filename != null) {
                this.getData();
            }
            this.emitter.emit("file-change");
        }
        else {
            this.writing = false;
        }
    }
    getFileName() {
        let configdir = atom.config.getUserConfigPath();
        if (!configdir) {
            configdir = atom.project.getPaths()[0];
        }
        this.filename = path_1.default.join(path_1.default.dirname(configdir), "package-switch.bundles");
    }
    onFileChange(callback) {
        this.emitter.on("file-change", callback);
    }
    getData() {
        try {
            const data = season_1.default.readFileSync(this.filename);
            Object.keys(data).forEach((key) => {
                this.data[key] = new bundle_1.Bundle(data[key]);
            });
        }
        catch (error) {
            this.notify("Error while reading settings from file");
        }
    }
    getPackages() {
        atom.packages.getAvailablePackageNames().forEach((name) => {
            this.single_bundles[name] = new bundle_1.Bundle({ packages: [{ name, action: "added" }] });
        });
    }
    setData(emit = true) {
        if (this.filename != null) {
            try {
                this.writing = true;
                season_1.default.writeFileSync(this.filename, this.data);
                if (emit) {
                    this.emitter.emit("file-change");
                }
            }
            catch (error) {
                this.notify(`Settings could not be written to ${this.filename}`);
            }
        }
        else {
            this.reload();
        }
    }
    notify(message) {
        if (atom.notifications != null) {
            atom.notifications.addError(message);
        }
        console.log("package-switch: " + message);
    }
    touchFile() {
        if (!fs_1.default.existsSync(this.filename)) {
            fs_1.default.writeFileSync(this.filename, "{}");
        }
    }
    addBundle(name, packages) {
        if (this.data[name] != null) {
            this.notify(`Bundle \"${name}\" already exists`);
        }
        else {
            this.data[name] = new bundle_1.Bundle({ packages });
            this.setData();
        }
    }
    replaceBundle(oldname, name, packages) {
        if ((oldname === name && this.data[oldname] != null) || (this.data[oldname] != null && this.data[name] == null)) {
            delete this.data[oldname];
            this.data[name] = new bundle_1.Bundle({ packages });
            this.setData();
        }
        else {
            if (!this.data[oldname]) {
                this.notify(`Bundle \"${oldname}\" not found`);
            }
            if (this.data[name] != null) {
                this.notify(`Bundle \"${name}\" already exists`);
            }
        }
    }
    removeBundle(bundle) {
        delete this.data[bundle];
        this.setData();
    }
    getBundle(bundle) {
        let _bundle;
        if ((_bundle = this.project_bundles[bundle]) != null) {
            return _bundle;
        }
        else if (this.data[bundle] != null) {
            return this.data[bundle];
        }
        else {
            return this.single_bundles[bundle];
        }
    }
    getBundles(singles = true) {
        const p = [];
        this.project_bundles = {};
        Object.keys(this.data).forEach((key) => {
            return p.push({
                name: key,
                packages: this.data[key].packages,
            });
        });
        if (!singles) {
            return p;
        }
        for (const project of atom.project.getPaths()) {
            let f;
            if (fs_1.default.existsSync((f = path_1.default.join(project, ".package-switch.cson")))) {
                let d, i;
                if ((i = new init_file_1.InitFile((d = path_1.default.basename(project)), f)).packages.length !== 0) {
                    p.push({
                        name: `Project: ${d}`,
                        packages: i.packages,
                    });
                    this.project_bundles[`Project: ${d}`] = i;
                }
            }
        }
        Object.keys(this.single_bundles).forEach((key) => {
            if (this.data[key] == null) {
                return p.push({
                    name: key,
                    packages: this.single_bundles[key].packages,
                });
            }
        });
        return p;
    }
}
exports.Bundles = Bundles;
//# sourceMappingURL=data:application/json;base64,